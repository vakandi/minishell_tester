#!/bin/bash

MINISHELL_PATH="../minishell"

# Run a specific test if the file name was specified
if [[ $1 ]]; then
    test_lists=(
        $1
    )
else
    test_lists=(
        "builtins"
        "pipes"
        "redirects"
        "extras"
    )
fi

if [[ $1 == "wildcards"  || $1 == "bonus" ]]; then
    MINISHELL_PATH="../minishell_bonus"
fi

# Function to check for leaks using the 'leaks' command
check_leaks() {
		# Specify the name of the binary program
	binary_name="minishell"
	local minishell_pid=$(pgrep "$binary_name")
	if [ -n "$minishell_pid" ]; then
		echo -e "\n"
	else
		echo "$binary_name is not running."
	fi
    local leaks_output=$(leaks "$minishell_pid")
    local leaks_count=$(echo "$leaks_output" | grep -o 'Process [0-9]*: [0-9]* leaks' | awk '{print $4}')
    if [[ "$leaks_count" -eq 0 || $1 == "bonus" ]]; then
        echo " ‚úÖ [ NO LEAKS ]"
    else
		print $RED
		echo -e "$RED ‚ùå [ LEAKS ] $END"
        echo "Number of leaks: $leaks_count"
        # Reset minishell to avoid interference with the next test
        pkill -f minishell
        # Launch minishell process again
        ./../minishell &
        # Give some time for minishell to start
        sleep 1
    fi
}

# Initialize arrays to store leaky commands and their corresponding leak counts
declare -a leaky_commands=()
declare -a leak_counts=()

BOLD="\e[1m"
YELLOW="\033[0;33m"
GREY="\033[38;5;244m"
PURPLE="\033[0;35m"
BLUE="\033[0;36m"
RED="\e[0;31m"
END="\033[0m"


binaryy_name="minishell"
minishelll_pid=$(pgrep "$binaryy_name")
if [ -n "$minishelll_pid" ]; then
	echo -e "\n"
else
	echo "$binaryy_name is not running."
	echo "Do './minishell&' to start minishell (don't compile with sanitize"
	exit 1
fi




# Give some time for minishell to start
sleep 1

# Initialize arrays to store leaky commands and their corresponding leak counts
declare -a leaky_commands=()
declare -a leak_counts=()

chmod 000 ./test_files/invalid_permission
mkdir ./outfiles
mkdir ./mini_outfiles
mkdir ./bash_outfiles

printf $RED
echo "üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•";
echo "                                                                                             ";
echo " ‚ñà‚ñà    ‚ñà‚ñà ‚ñà ‚ñà‚ñà    ‚ñà ‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà   ‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà     ‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà  ";
echo " ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà ‚ñà ‚ñà‚ñà‚ñà   ‚ñà ‚ñà ‚ñà     ‚ñà   ‚ñà ‚ñà     ‚ñà     ‚ñà         ‚ñà‚ñà   ‚ñà     ‚ñà       ‚ñà‚ñà   ‚ñà     ‚ñà   ‚ñà‚ñà ";
echo " ‚ñà ‚ñà‚ñà‚ñà‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñà  ‚ñà ‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà  ‚ñà     ‚ñà         ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà  ";
echo " ‚ñà  ‚ñà‚ñà  ‚ñà ‚ñà ‚ñà  ‚ñà‚ñà ‚ñà ‚ñà     ‚ñà ‚ñà   ‚ñà ‚ñà     ‚ñà     ‚ñà         ‚ñà‚ñà   ‚ñà         ‚ñà   ‚ñà‚ñà   ‚ñà     ‚ñà   ‚ñà‚ñà ";
echo " ‚ñà      ‚ñà ‚ñà ‚ñà   ‚ñà‚ñà‚ñà ‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà   ‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà   ‚ñà‚ñà ";
echo "                                                                                             ";
echo "üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•";
echo "                                                                                              ";
echo "                    Leaks features by @vakandi                                               ";	
echo "                                                                                              ";

PROMPT=$(echo -e "\nexit\n" | $MINISHELL_PATH | head -n 1 | sed "s/\x1B\[[0-9;]\{1,\}[A-Za-z]//g" )
# Helper commands:
REMOVE_COLORS="sed s/\x1B\[[0-9;]\{1,\}[A-Za-z]//g"
REMOVE_EXIT="grep -v ^exit$"

ok=0
i=0

for testfile in "${test_lists[@]}"; do
    printf $RED
    echo ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî $testfile

	while read teste; do
		((i++))

		rm -rf ./outfiles/*
		rm -rf ./mini_outfiles/*
		MINI_OUTPUT=$(echo -e "$teste" | $MINISHELL_PATH 2> /dev/null | $REMOVE_COLORS | grep -vF "$PROMPT" | $REMOVE_EXIT )
		MINI_OUTFILES=$(cp ./outfiles/* ./mini_outfiles &>/dev/null)
		MINI_EXIT_CODE=$(echo -e "$MINISHELL_PATH\n$teste\necho \$?\nexit\n" | bash 2> /dev/null | $REMOVE_COLORS | grep -vF "$PROMPT" | $REMOVE_EXIT | tail -n 1)
		MINI_ERROR_MSG=$(trap "" PIPE && echo "$teste" | $MINISHELL_PATH 2>&1 > /dev/null | grep -o '[^:]*$' )

		# Check for leaks after each test
		check_leaks "$testfile" "$teste"

		rm -rf ./outfiles/*
		rm -rf ./bash_outfiles/*
		BASH_OUTPUT=$(echo -e "$teste" | bash 2> /dev/null)
		BASH_EXIT_CODE=$(echo $?)
		BASH_OUTFILES=$(cp ./outfiles/* ./bash_outfiles &>/dev/null)
		BASH_ERROR_MSG=$(trap "" PIPE && echo "$teste" | bash 2>&1 > /dev/null | grep -o '[^:]*$' | head -n1)

		OUTFILES_DIFF=$(diff --brief ./mini_outfiles ./bash_outfiles)

		printf $YELLOW
		printf "Test %3s: " $i
		if [[ "$MINI_OUTPUT" == "$BASH_OUTPUT" && "$MINI_EXIT_CODE" == "$BASH_EXIT_CODE" && -z "$OUTFILES_DIFF" ]]; then
			printf ‚úÖ
			((ok++))
			if [ "$MINI_ERROR_MSG" != "$BASH_ERROR_MSG" ]; then
				printf "‚ö†Ô∏è "
			fi
		else
			printf ‚ùå
		fi
		printf "$GREY $teste \n$END"
		if [ "$OUTFILES_DIFF" ]; then
			echo "$OUTFILES_DIFF"
			echo mini outfiles:
			cat ./mini_outfiles/*
			echo bash outfiles:
			cat ./bash_outfiles/*
		fi
		if [ "$MINI_OUTPUT" != "$BASH_OUTPUT" ]; then
			echo mini output = \($MINI_OUTPUT\)
			echo bash output = \($BASH_OUTPUT\)
		fi
		if [ "$MINI_EXIT_CODE" != "$BASH_EXIT_CODE" ]; then
			echo mini exit code = $MINI_EXIT_CODE
			echo bash exit code = $BASH_EXIT_CODE
		fi
		if [ "$MINI_ERROR_MSG" != "$BASH_ERROR_MSG" ]; then
			echo mini error = \($MINI_ERROR_MSG\)
			echo bash error = \($BASH_ERROR_MSG\)
		fi
		sleep 0.15s
	done < "$testfile"
done

# Check for leaks after all tests are done
check_leaks "${test_lists[*]}"

pkill -f minishell

chmod 666 ./test_files/invalid_permission
rm -rf ./outfiles
rm -rf ./mini_outfiles
rm -rf ./bash_outfiles

printf $PURPLE
printf $BOLD
echo   $ok/$i
printf $END

if [[ "$ok" == "$i" ]]; then
    echo "üéä üéä üéä"
    echo "üòé üòé üòé"
    echo "üéâ üéâ üéâ"
    echo "GREAT! ALL GOOD"
    exit 0
else
	if [[ "$leaks_count" > 0 ]]; then
    echo "Leaky Commands and Leak Counts:"
    for ((j=0; j<${#leaky_commands[@]}; j++)); do
        echo -e "$RED ${leaky_commands[j]} ::  ${leak_counts[j]} leaks \n$END"
    done
    exit 1
	fi
fi
